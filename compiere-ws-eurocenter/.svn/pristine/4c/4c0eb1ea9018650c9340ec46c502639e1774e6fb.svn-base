package Util;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.logging.Level;

import org.compiere.db.QueryUtil;
import org.compiere.model.MBPartner;
import org.compiere.model.MDocType;
import org.compiere.model.MInOut;
import org.compiere.model.MLocator;
import org.compiere.model.MMovement;
import org.compiere.model.MMovementConfirm;
import org.compiere.model.MMovementLine;
import org.compiere.model.MOrder;
import org.compiere.model.MOrderLine;
import org.compiere.model.MOrg;
import org.compiere.model.MProduct;
import org.compiere.model.MWarehouse;
import org.compiere.util.Ctx;
import org.compiere.util.DB;
import org.compiere.util.Trx;

import com.audaxis.compiere.db.Util;

public class WSUtil {
	
	public static MLocator [] getWithWhereClause (Ctx ctx, int M_Warehouse_ID, String whereclause)
	 {
	 	ArrayList<MLocator> list = new ArrayList<MLocator>();
		
		String sql = "SELECT * FROM M_Locator WHERE M_Warehouse_ID=? ";
		if(whereclause!=null)
			sql = sql+whereclause;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Warehouse_ID);
			rs = pstmt.executeQuery();
			while (rs.next ())
				list.add (new MLocator (ctx, rs, null));
		}
		catch (SQLException ex) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
		
		if(list.size () == 0)
			return null;

		MLocator[] retValue = new MLocator[list.size ()];
		list.toArray (retValue);
		return retValue;
	 }
	
	public static  MInOut getMInOutByDocNo(Ctx ctx,String DocNo, Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT M_InOut_ID FROM M_InOut WHERE AD_CLient_ID=? and DocumentNo = ? ",trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MInOut(ctx, rs.getInt(1), trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static MOrder getOrderByDocNo(Ctx ctx,String DocNo, String IsSotrx,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT C_Order_ID FROM C_Order WHERE AD_CLient_ID=? and DocumentNo = ? and IsSotrx = ? and ((DocStatus in ('CO') and C_Order.IsSotrx = 'N') OR (DocStatus in ('IP','CO') and C_Order.IsSotrx = 'Y') ) order by C_Order_ID DESC", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MOrder(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static MMovement getMovementByDocNo(Ctx ctx,String DocNo,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT M_Movement_ID FROM M_Movement WHERE AD_CLient_ID=? and DocumentNo = ?", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MMovement(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static MMovementConfirm getMovementConfirmByDocNo(Ctx ctx,String DocNo,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT MMovementConfirm_ID FROM MMovementConfirm WHERE AD_CLient_ID=? and DocumentNo = ?", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MMovementConfirm(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static int deleteLines(Trx trx,String tableName, String whereClause, Object... params)
	{
		String sql = "DELETE FROM ";
		sql = sql + tableName;
		sql = sql + " where ";
		sql = sql + whereClause;
		int nb = DB.executeUpdate(trx, sql, params);
		return nb;
	}
	
	public static MMovementConfirm getMovementConfirmByMov_ID(Ctx ctx,int M_Movement_ID,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<MMovementConfirm> lis = new ArrayList<>();
		try {
			ps = DB.prepareStatement("SELECT M_MovementConfirm_ID FROM M_MovementConfirm WHERE AD_CLient_ID=? and M_Movement_ID = ? and DocStatus in ('DR','IN','IP') and RowNum = 1", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setInt(2, M_Movement_ID);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MMovementConfirm(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}

	public static MOrg getOrgByValue (Ctx ctx, int AD_Client_ID, String Value)
	{
		String sql = "SELECT * FROM AD_Org WHERE AD_Client_ID=? and Value = ?";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString(2, Value);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MOrg (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
	
		return null;
	}

	public static MWarehouse getWarehouseByValue (Ctx ctx, int AD_Org_ID, String Value)
	{
		String sql = null;
		if(AD_Org_ID>0)
			sql = "SELECT * FROM M_Warehouse WHERE AD_Org_ID=? and Value = ? and AD_Client_ID = ?";
		else
			sql = "SELECT * FROM M_Warehouse WHERE  Value = ? and AD_Client_ID = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			int index = 1;
			pstmt = DB.prepareStatement(sql, (Trx) null);
			if(AD_Org_ID>0)
				pstmt.setInt (index++, AD_Org_ID);
			pstmt.setString (index++, Value);
			pstmt.setInt (index++, ctx.getAD_Client_ID());
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MWarehouse (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}

		return null;
	}
	
	public static MDocType getDocTypeByName (Ctx ctx, int AD_Client_ID, String Name)
	{
		String sql = "SELECT * FROM C_DocType WHERE AD_Client_ID=? and Name = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString (2, Name);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MDocType (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}

		return null;
	}
	
	public static MOrderLine getOrderlineByLineNo(Ctx ctx, int Order_ID, int LineNo)
	{
		String sql = "SELECT * FROM C_OrderLine WHERE C_Order_ID= ? and Line = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, Order_ID);
			pstmt.setInt (2, LineNo);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MOrderLine (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}

		return null;
	}
	
	public static MProduct isProductExist(Ctx ctx, int AD_Client_ID, String ProductValue)
	{
		String sql = "SELECT M_Product_ID FROM M_Product WHERE AD_Client_ID= ? and Value = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString (2, ProductValue);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MProduct(ctx, rs.getInt(1), (Trx) null) ;
			else
				return null;
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
	}
	
	public static Timestamp parsedate (String date)
	{
		if(date==null || date.length()!=10)
			return new Timestamp(GregorianCalendar.getInstance().getTimeInMillis());
		SimpleDateFormat parsed = new SimpleDateFormat("dd/MM/yyyy");
		
		try {
			return new Timestamp(parsed.parse(date).getTime());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			return new Timestamp(GregorianCalendar.getInstance().getTimeInMillis());
		}
	}
	
	
}
