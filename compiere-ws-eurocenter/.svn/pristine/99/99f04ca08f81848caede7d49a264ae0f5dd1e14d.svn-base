package com.audaxis.erp.service;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.LinkedHashSet;
import java.util.Set;

import org.compiere.util.DB;
import org.compiere.util.Trx;
import org.compiere.model.MBPartner;
import org.compiere.model.MDocType;
import org.compiere.model.MInOut;
import org.compiere.model.MInOutLineMA;
import org.compiere.model.MOrder;
import org.compiere.model.MOrg;
import org.compiere.model.MWarehouse;
import org.compiere.process.DocumentEngine;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.audaxis.compiere.db.Util;
import com.audaxis.compiere.model.MDocTypeInfo;
import com.audaxis.compiere.model.MInOutProxy;
import com.audaxis.compiere.service.CompiereSessionFullService;
import com.audaxis.erp.json.BPartner;
import com.audaxis.erp.json.BPartnerContact;
import com.audaxis.erp.json.CreateBPResult;
import com.audaxis.erp.json.InOut;
import com.audaxis.erp.json.InOutLines;
import com.audaxis.erp.json.SetInOutResult;

import Util.WSUtil;

@Component
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@CacheConfig(cacheNames="common")
public class SetInOutService extends CompiereSessionFullService implements ISetInOutService {

	@Autowired
	protected ISessionService sessionService;
	
	private Set<InOutLines> intOutLines = new LinkedHashSet<>();
	
	private int client_ID = 0;
	
	private MOrg org = null;
	private MWarehouse mw = null;
	private MDocType md = null;
	private MBPartner mb;


	@Override
	public SetInOutResult setInOut(InOut inout) {
		SetInOutResult ret = new SetInOutResult();
		ret.error = SetInOutResult.E000;
		//validate IDsession
		ret = validateSession(inout);
		
		if(client_ID == 0)
		{
			ret.error = SetInOutResult.E002;
			ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E002);
			ret.m_InOut_ID = 0;
			log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E002), "", ret.errordesc));
			return ret;
		}
		
		if(inout.ISSOTRX == null || inout.ISSOTRX.length() != 1 || (!inout.ISSOTRX.equals('N') && !inout.ISSOTRX.equals('Y'))){
			ret.error = SetInOutResult.E003;
			ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E003);
			ret.m_InOut_ID = 0;
			log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E003), "", ret.errordesc));
			return ret;
		}
		
		if(inout.MAG != null){
			org = WSUtil.getOrgByValue(getCtx(),client_ID,inout.MAG);
			if(org == null)
			{
				ret.error = SetInOutResult.E040;
				ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E040);
				ret.m_InOut_ID = 0;
				log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E040), "", ret.errordesc));
				return ret;
			}
		}
		if(inout.ENTREPOT != null){
			mw = WSUtil.getWarehouseByValue(getCtx(), org.getAD_Org_ID(), inout.ENTREPOT);
			if(mw == null)
			{
				ret.error = SetInOutResult.E041;
				ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E041);
				ret.m_InOut_ID = 0;
				log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E041), "", ret.errordesc));
				return ret;
			}
		}
		
		if(inout.TYPEDOC != null){
			md = WSUtil.getDocTypeByName(getCtx(), client_ID, inout.TYPEDOC);
			if(md == null)
			{
				ret.error = SetInOutResult.E020;
				ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E020);
				ret.m_InOut_ID = 0;
				log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E020), "", ret.errordesc));
				return ret;
			}
		}
		
		if(inout.BPARTNER != null){
			mb = MBPartner.get(getCtx(), inout.BPARTNER);
			if(mb == null)
			{
				ret.error = SetInOutResult.E030;
				ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E030);
				ret.m_InOut_ID = 0;
				log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E030), "", ret.errordesc));
				return ret;
			}
		}
		
		//Controle InOut
		if(inout.NO_INOUT == null)
		{
			if(inout.ORDERNO == null && inout.ISSOTRX.equals("Y"))
			{
				ret.error = SetInOutResult.E504;
				ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E504);
				ret.m_InOut_ID = 0;
				ret.documentNo = "";
				log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E504), "", ret.errordesc));
				return ret;
			}
			if(inout.ORDERNO != null && inout.ISSOTRX.equals("Y"))
			{
				//Livraison
				MOrder mo = getOrderByDocNo(inout.ORDERNO);
				if(!mo.isSOTrx() && inout.ISSOTRX.equals("Y"))
				{
					ret.error = SetInOutResult.E004;
					ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E004);
					ret.m_InOut_ID = 0;
					ret.documentNo = "";
					log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E004), "", ret.errordesc));
					return ret;
				}
				MInOut mi = new MInOut(getCtx(), 0, get_Trx());
				mi.setClientOrg(client_ID, mo.getAD_Org_ID());
				mi.setOrder(mo);
			}
			if(inout.ORDERNO == null && inout.ISSOTRX.equals("N"))
			{
				//Réception sans OA
				
			}
			if(inout.ORDERNO != null && inout.ISSOTRX.equals("N"))
			{
				//Reception Achat avec OA
				MOrder mo = getOrderByDocNo(inout.ORDERNO);
				if(mo.isSOTrx() && inout.ISSOTRX.equals("N"))
				{
					ret.error = SetInOutResult.E004;
					ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E004);
					ret.m_InOut_ID = 0;
					ret.documentNo = "";
					log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E004), "", ret.errordesc));
					return ret;
				}
			}
		}
		else
		{
			//Modif
			//Exists ?
			MInOut mi = getMInOutByDocNo(inout.NO_INOUT);
			if(mi == null)
			{
				ret.error = SetInOutResult.E010;
				ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E010);
				ret.m_InOut_ID = 0;
				ret.documentNo = inout.NO_INOUT;
				log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E010), "", ret.errordesc));
				return ret;
			}
			if(mi.getDocStatus().equals("CO") && inout.DOCACTION.equals("VO"))
			{
				//Annulation
				mi.setDocAction("VO");
				mi.save();
				if(!DocumentEngine.processIt(mi, MInOut.DOCACTION_Void))
				{
					ret.error = SetInOutResult.E050;
					ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E050);
					ret.m_InOut_ID = mi.getM_InOut_ID();
					ret.documentNo = inout.NO_INOUT;			
					log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E050), "", ret.errordesc));
					return ret;
				}
				ret.error = SetInOutResult.E502;
				ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E502);
				ret.m_InOut_ID = mi.getM_InOut_ID();
				ret.documentNo = inout.NO_INOUT;			
				log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E502), "", ret.errordesc));
				return ret;
			}
			
		}
		
		return ret;
	}

	private SetInOutResult validateSession(InOut inout) {
		SetInOutResult ret = new SetInOutResult();
		ret.error = SetInOutResult.E000;

		if(inout == null || inout.key == null || inout.key.length() == 0){
			ret.error = SetInOutResult.E001;
			ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E001);
			log.info(String.format(SetInOutResult.getErrorMsg(SetInOutResult.E001), "", ret.errordesc));
			return ret;
		}

		PreparedStatement ps = null;
		ResultSet rs = null;
		Timestamp created = null;
		try {
			ps = DB.prepareStatement("SELECT Created, AD_Client_ID FROM AD_Session WHERE AD_SESSION_ID=?", (Trx)null);
			ps.setString(1, inout.key);
			rs = ps.executeQuery();
			if (rs.next()) {
				created = rs.getTimestamp("Created");
				client_ID = rs.getInt("AD_Client_ID");
			}
		} catch (Exception e) {
			ret.error = SetInOutResult.E001;
			ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E001);
			log.info(String.format("Authenticate for Key %s, %s", inout.key, ret.errordesc));
			return ret;
		} finally {
			Util.closeCursor(ps, rs);
		}

		//Calculate expired date
		Timestamp now = new Timestamp(System.currentTimeMillis());
		Calendar cal = Calendar.getInstance();
		cal.setTime(now);
		cal.add(Calendar.HOUR_OF_DAY, -12);
		cal.add(Calendar.MINUTE, -30);
		Timestamp expireddate = new Timestamp(cal.getTimeInMillis());
		//

		//key not found or expired
		if (created == null || created.before(expireddate)){
			ret.error = SetInOutResult.E001;
			ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E001);
			log.info(String.format("Authenticate for Key %s, %s", inout.key, ret.errordesc));
		}else{
			ret.error = SetInOutResult.E000;
			ret.errordesc = SetInOutResult.getErrorMsg(SetInOutResult.E000);
			log.info(String.format("Authenticate for Key %s, %s", inout.key, ret.errordesc));
		}

		return ret;

	}

	private MInOut getMInOutByDocNo(String DocNo)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT M_InOut_ID FROM M_InOut WHERE AD_CLient_ID=? and DocumentNo = ? ", get_Trx());
			ps.setInt(1, client_ID);
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MInOut(getCtx(), rs.getInt(1), get_Trx());
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	private MOrder getOrderByDocNo(String DocNo)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT C_Order_ID FROM C_Order WHERE AD_CLient_ID=? and DocumentNo = ? ", get_Trx());
			ps.setInt(1, client_ID);
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MOrder(getCtx(), rs.getInt(1), get_Trx());
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
}
