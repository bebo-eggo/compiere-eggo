package com.audaxis.erp.ws.core;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.audaxis.erp.json.Status;
import com.audaxis.erp.json.UserSession;
import com.audaxis.erp.security.AuthorizationException;
import com.audaxis.erp.security.InvalidPasswordException;
import com.audaxis.erp.security.InvalidSessionException;
import com.audaxis.erp.security.UnknownUserException;
import com.audaxis.erp.service.ISessionService;
import com.audaxis.erp.ws.BaseWs;

@Controller
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
public class SessionWs extends BaseWs<ISessionService> {

	@Autowired 
	private ISessionService service;

	@RequestMapping("/isSessionValid")
	@ResponseBody 
	public Status isSessionValid() 
	throws InvalidSessionException {
		String session_id = //getSessionId(headers, paramSessionId);
				getSessionId();
		Status ret = new Status();
		try {
			service.isSessionValid(session_id);
			ret.status = Status.SUCCESS;
		}
		catch (InvalidSessionException e) {
			// TODO: handle exception
			if(e.getErrorCode().equals("SECURITY_INVALID_SESSION"))
				ret.status = Status.FAILURE;
			
		}finally {
			
		}
		
		return ret;
	}

	@RequestMapping("/login")
	@ResponseBody 
	public UserSession login(
			@RequestParam("login") String login, 
			@RequestParam("passwd") String password, 
			@RequestParam(value="clientID",required=false) String clientID,
			@RequestParam(value="role",required=false) String role)
	throws InvalidPasswordException, UnknownUserException, AuthorizationException {
		return service.login(login, password,clientID, role);
	}

	@RequestMapping("/logoff")
	@ResponseBody 
	public Status logoff()
	throws InvalidPasswordException, UnknownUserException, AuthorizationException {
		String session_id = //getSessionId(headers, paramSessionId);
				getSessionId();
		service.logoff(session_id);
		Status ret = new Status();
		ret.status = Status.SUCCESS;
		return ret;
	}

	@RequestMapping("/authentify")
	@ResponseBody 
	public void authentify(@RequestParam("login") String login, @RequestParam("passwd") String password) 
	throws InvalidPasswordException, UnknownUserException, AuthorizationException {
		service.authentify(login, password);
	}

	@RequestMapping("/setSessionLanguage")
	public @ResponseBody Status setSessionLanguage(@RequestParam("language") String language)
	throws InvalidPasswordException, UnknownUserException, AuthorizationException {
		return service.setSessionLanguage(language);
	}

	@RequestMapping(value="/getUserInfo")
	public @ResponseBody UserSession getUserInfo(
			@RequestParam(value="session_id", required=false) String sessionId) //TODO Il vaudrait mieux etre coherent et utiliser X-SessionId
	throws InvalidSessionException {
		String session_id = sessionId;
		if (StringUtils.isBlank(session_id)){
			session_id = getSessionId();
		}
		return service.getUserInfo(session_id);
	}
	
}
 