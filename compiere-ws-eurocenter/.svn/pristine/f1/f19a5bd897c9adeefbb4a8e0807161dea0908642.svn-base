package com.audaxis.erp.service;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.concurrent.CopyOnWriteArrayList;

import org.compiere.util.DB;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.audaxis.compiere.service.CompiereSessionFullService;
import com.audaxis.erp.json.OrderDownload;
import com.audaxis.erp.json.OrderPaySch;
import com.audaxis.erp.json.OrderPaySchList;
import com.audaxis.erp.json.SetOrderPaySchResult;

@Component
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@CacheConfig(cacheNames="common")
public class SetOrderPaySchService extends CompiereSessionFullService implements ISetOrderPaySchService {

	@Override
	public SetOrderPaySchResult setOrderPaySch(OrderPaySch ordPayn) {
		// TODO Auto-generated method stub
		//INSERT
		
		//UPDATE
		
		return null;
	}

	@Override
	public OrderPaySch getOrderPaySchByID(int orderPaySch_ID) {
		// TODO Auto-generated method stub
		OrderPaySch ret = new OrderPaySch();
		String sql = "Select ops.z_orderpaymschedule_id, co.C_order_ID, co.DocumentNo, co.Poreference, ops.totalamt,ops.duedate,"
				+ "ops.seqno, ops.z_typeecheance_id, zt.value as typeech,org.Value as mag," + 
				"zt.isfinancement, zt.isprom, zt.isajust " + 
				"from z_orderpaymschedule ops " + 
				"inner join z_typeecheance zt on zt.z_typeecheance_id = ops.z_typeecheance_id " + 
				"inner join C_Order co on co.c_order_id = ops.c_order_id " + 
				"inner join AD_org org on org.ad_org_id = co.ad_org_id " + 
				"where ops.z_orderpaymschedule_id = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			int i=1;
			pstmt = DB.prepareStatement(sql,get_Trx());
			pstmt.setInt(i++, orderPaySch_ID);
			rs = pstmt.executeQuery();
			if (rs.next ())
			{
				ret.ODERPAYMENTSCHEDULE_ID = ""+orderPaySch_ID;
				ret.ORDER_ID = rs.getString("C_order_ID");
				ret.AJUSTEMENT = rs.getString("isajust").equals("Y")?"Y":"N";
				ret.FINANCEMENT = rs.getString("isfinancement").equals("Y")?"Y":"N";
				ret.PROMOTEUR = rs.getString("isprom").equals("Y")?"Y":"N";
				if(rs.getTimestamp("duedate")!=null) {
					Timestamp ti = rs.getTimestamp("duedate");
					String DueDate = new SimpleDateFormat("dd/MM/yyyy").format(ti);
					ret.DUEDATE = DueDate;
				}
				ret.MAG = rs.getString("mag");
				ret.ORDERNO = rs.getString("DocumentNo");
				ret.POREF = rs.getString("Poreference");
				ret.SEQNO = rs.getString("seqno");
				ret.TOTALAMT = rs.getString("totalamt");
				ret.TYPEECHEANCE = rs.getString("typeech");
				ret.TypeEcheance_ID = rs.getString("z_typeecheance_id");
			}
			if(ret.ODERPAYMENTSCHEDULE_ID==null || ret.ODERPAYMENTSCHEDULE_ID.length()==0)
			{
				ret.ODERPAYMENTSCHEDULE_ID = ""+-1;
				return ret; 
			}
		}catch (SQLException ex) {
			ret.ODERPAYMENTSCHEDULE_ID = ""+-1;
			ex.printStackTrace();
			return ret;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
		return ret;
	}

	@Override
	public int deleteOrderPaySchByID(int orderPaySch_ID) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public OrderPaySchList getOrderPaySchsByOrderIDPoRef(int order_id, String Poreference, String typeEch) {
		// TODO Auto-generated method stub
		OrderPaySchList ordPaySchList = new OrderPaySchList();
		CopyOnWriteArrayList<OrderPaySch> fileList = new CopyOnWriteArrayList<>();
		String sql = "Select ops.z_orderpaymschedule_id, co.C_order_ID, co.DocumentNo, co.Poreference, ops.totalamt,ops.duedate,"
				+ "ops.seqno, ops.z_typeecheance_id, zt.value as typeech,org.Value as mag," + 
				"zt.isfinancement, zt.isprom, zt.isajust " + 
				"from z_orderpaymschedule ops " + 
				"inner join z_typeecheance zt on zt.z_typeecheance_id = ops.z_typeecheance_id " + 
				"inner join C_Order co on co.c_order_id = ops.c_order_id " + 
				"inner join AD_org org on org.ad_org_id = co.ad_org_id " + 
				"inner join C_DOCTYPEINFO cd on cd.C_DocType_ID = co.C_DocType_ID and cd.IsDevis = 'N' ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			
			int i=1;
			
			if(order_id>0)
			{
				sql = sql +" where ops.C_order_ID = ? ";
				if(typeEch!=null)
				{
					sql = sql +" and zt.value = ? ";
				}
				pstmt = DB.prepareStatement(sql,get_Trx());
				pstmt.setInt(i++, order_id);
			}
			else
				if(Poreference!=null)
				{
					sql = sql +" where co.Poreference = ? ";
					if(typeEch!=null)
					{
						sql = sql +" and zt.value = ? ";
					}
					pstmt = DB.prepareStatement(sql,get_Trx());
					pstmt.setString(i++, Poreference);
				}
			if(typeEch!=null)
			{
				pstmt.setString(i++, typeEch);
			}
			
			sql = sql +" order by co.DocumentNo, ops.seqno";
			rs = pstmt.executeQuery();
			while(rs.next())
			{
				if(order_id>0)
				{
					ordPaySchList.ORDER_ID = rs.getString("C_order_ID");
					ordPaySchList.POREFERENCE = rs.getString("Poreference");
					ordPaySchList.ORDERNO = rs.getString("DocumentNo");
				}
				if(Poreference!=null)
				{
					ordPaySchList.POREFERENCE = rs.getString("Poreference");
				}
				
				OrderPaySch ret = new OrderPaySch();
				ret.ODERPAYMENTSCHEDULE_ID = rs.getString("z_orderpaymschedule_id");
				ret.ORDER_ID = rs.getString("C_order_ID");
				ret.AJUSTEMENT = rs.getString("isajust").equals("Y")?"Y":"N";
				ret.FINANCEMENT = rs.getString("isfinancement").equals("Y")?"Y":"N";
				ret.PROMOTEUR = rs.getString("isprom").equals("Y")?"Y":"N";
				if(rs.getTimestamp("duedate")!=null) {
					Timestamp ti = rs.getTimestamp("duedate");
					String DueDate = new SimpleDateFormat("dd/MM/yyyy").format(ti);
					ret.DUEDATE = DueDate;
				}
				ret.MAG = rs.getString("mag");
				ret.ORDERNO = rs.getString("DocumentNo");
				ret.POREF = rs.getString("Poreference");
				ret.SEQNO = rs.getString("seqno");
				ret.TOTALAMT = rs.getString("totalamt");
				ret.TYPEECHEANCE = rs.getString("typeech");
				ret.TypeEcheance_ID = rs.getString("z_typeecheance_id");
				fileList.add(ret);
			}
		}catch (SQLException ex) {
			ordPaySchList.ORDER_ID = ""+-1;
			ex.printStackTrace();
			return ordPaySchList;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
		ordPaySchList.OrderPaymentSchedule_set = new HashSet<>(fileList);
		return ordPaySchList;
	}

}
