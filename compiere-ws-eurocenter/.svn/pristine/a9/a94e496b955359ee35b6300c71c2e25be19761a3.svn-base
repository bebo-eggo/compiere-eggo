package Util;

import java.math.BigDecimal;
import java.security.InvalidParameterException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;

import org.compiere.db.QueryUtil;
import org.compiere.model.MBPartner;
import org.compiere.model.MDocType;
import org.compiere.model.MInOut;
import org.compiere.model.MLocator;
import org.compiere.model.MMovement;
import org.compiere.model.MMovementConfirm;
import org.compiere.model.MMovementLine;
import org.compiere.model.MOrder;
import org.compiere.model.MOrderLine;
import org.compiere.model.MOrg;
import org.compiere.model.MProduct;
import org.compiere.model.MUser;
import org.compiere.model.MWarehouse;
import org.compiere.process.DocumentEngine;
import org.compiere.util.Ctx;
import org.compiere.util.DB;
import org.compiere.util.Trx;
import org.compiere.vos.DocActionConstants;

import com.audaxis.compiere.db.Util;
import com.audaxis.compiere.model.MDocTypeInfo;
import com.audaxis.compiere.util.CompiereException;

public class WSUtil {
	
	public static MLocator [] getWithWhereClause (Ctx ctx, int M_Warehouse_ID, String whereclause)
	 {
	 	ArrayList<MLocator> list = new ArrayList<MLocator>();
		
		String sql = "SELECT * FROM M_Locator WHERE M_Warehouse_ID=? ";
		if(whereclause!=null)
			sql = sql+whereclause;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt(1, M_Warehouse_ID);
			rs = pstmt.executeQuery();
			while (rs.next ())
				list.add (new MLocator (ctx, rs, null));
		}
		catch (SQLException ex) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
		
		if(list.size () == 0)
			return null;

		MLocator[] retValue = new MLocator[list.size ()];
		list.toArray (retValue);
		return retValue;
	 }
	
	public static  MInOut getMInOutByDocNo(Ctx ctx,String DocNo, Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT M_InOut_ID FROM M_InOut WHERE AD_CLient_ID=? and DocumentNo = ? ",trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MInOut(ctx, rs.getInt(1), trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static MOrder getOrderByDocNo(Ctx ctx,String DocNo, String IsSotrx,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT C_Order_ID FROM C_Order WHERE AD_CLient_ID=? and DocumentNo = ? and IsSotrx = ? and ((DocStatus in ('CO') and C_Order.IsSotrx = 'N') OR (DocStatus in ('IP','CO') and C_Order.IsSotrx = 'Y') ) order by C_Order_ID DESC", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			ps.setString(3, IsSotrx);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MOrder(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static MMovement getMovementByDocNo(Ctx ctx,String DocNo,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT M_Movement_ID FROM M_Movement WHERE AD_CLient_ID=? and DocumentNo = ?", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MMovement(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static MMovementConfirm getMovementConfirmByDocNo(Ctx ctx,String DocNo,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = DB.prepareStatement("SELECT MMovementConfirm_ID FROM MMovementConfirm WHERE AD_CLient_ID=? and DocumentNo = ?", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setString(2, DocNo);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MMovementConfirm(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}
	
	public static int deleteLines(Trx trx,String tableName, String whereClause, Object... params)
	{
		String sql = "DELETE FROM ";
		sql = sql + tableName;
		sql = sql + " where ";
		sql = sql + whereClause;
		int nb = DB.executeUpdate(trx, sql, params);
		return nb;
	}
	
	public static MMovementConfirm getMovementConfirmByMov_ID(Ctx ctx,int M_Movement_ID,Trx trx)
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<MMovementConfirm> lis = new ArrayList<>();
		try {
			ps = DB.prepareStatement("SELECT M_MovementConfirm_ID FROM M_MovementConfirm WHERE AD_CLient_ID=? and M_Movement_ID = ? and DocStatus in ('DR','IN','IP') and RowNum = 1", trx);
			ps.setInt(1, ctx.getAD_Client_ID());
			ps.setInt(2, M_Movement_ID);
			rs = ps.executeQuery();
			if (rs.next()) {
				return new MMovementConfirm(ctx, rs.getInt(1),trx);
			}
		} catch (Exception e) {
			return null;
		} finally {
			Util.closeCursor(ps, rs);
		}
		
		return null;
	}

	public static MOrg getOrgByValue (Ctx ctx, int AD_Client_ID, String Value)
	{
		String sql = "SELECT * FROM AD_Org WHERE AD_Client_ID=? and Value = ?";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString(2, Value);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MOrg (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
	
		return null;
	}

	public static MWarehouse getWarehouseByValue (Ctx ctx, int AD_Org_ID, String Value)
	{
		String sql = null;
		if(AD_Org_ID>0)
			sql = "SELECT * FROM M_Warehouse WHERE AD_Org_ID=? and Value = ? and AD_Client_ID = ?";
		else
			sql = "SELECT * FROM M_Warehouse WHERE  Value = ? and AD_Client_ID = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			int index = 1;
			pstmt = DB.prepareStatement(sql, (Trx) null);
			if(AD_Org_ID>0)
				pstmt.setInt (index++, AD_Org_ID);
			pstmt.setString (index++, Value);
			pstmt.setInt (index++, ctx.getAD_Client_ID());
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MWarehouse (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}

		return null;
	}
	
	public static MDocType getDocTypeByName (Ctx ctx, int AD_Client_ID, String Name)
	{
		String sql = "SELECT * FROM C_DocType WHERE AD_Client_ID=? and Name = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString (2, Name);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MDocType (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}

		return null;
	}
	
	public static MUser getUserByName (Ctx ctx, int AD_Client_ID, String Name)
	{
		String sql = "SELECT * FROM AD_User WHERE AD_Client_ID=? and Name = ? "
				+ "and exists (select 1 from C_BPartner cb where cb.C_BPartner_ID = AD_User.C_BPartner_ID and cb.IsEmployee = 'Y' and cb.IsActive='Y' and cb.IsSalesRep = 'Y' )";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString (2, Name);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MUser (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}

		return null;
	}
	
	public static MOrderLine getOrderlineByLineNo(Ctx ctx, int Order_ID, int LineNo)
	{
		String sql = "SELECT * FROM C_OrderLine WHERE C_Order_ID= ? and Line = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, Order_ID);
			pstmt.setInt (2, LineNo);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MOrderLine (ctx, rs, null);
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}

		return null;
	}
	
	public static MProduct isProductExist(Ctx ctx, int AD_Client_ID, String ProductValue)
	{
		String sql = "SELECT M_Product_ID FROM M_Product WHERE AD_Client_ID= ? and Value = ? ";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement(sql, (Trx) null);
			pstmt.setInt (1, AD_Client_ID);
			pstmt.setString (2, ProductValue);
			rs = pstmt.executeQuery ();
			if (rs.next ())
				return new MProduct(ctx, rs.getInt(1), (Trx) null) ;
			else
				return null;
		}
		catch (Exception e) {
			return null;
		}
		finally {
			DB.closeResultSet(rs);
			DB.closeStatement(pstmt);
		}
	}
	
	public static Timestamp parsedate (String date)
	{
		if(date==null || date.length()!=10)
			return new Timestamp(GregorianCalendar.getInstance().getTimeInMillis());
		SimpleDateFormat parsed = new SimpleDateFormat("dd/MM/yyyy");
		
		try {
			return new Timestamp(parsed.parse(date).getTime());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			return new Timestamp(GregorianCalendar.getInstance().getTimeInMillis());
		}
	}
	
	public static int changePart(Ctx ctx, MOrder mo, int line, int fromProductID, int toProductID, Trx trx)
	{
		int lineOut = 0;
		if (fromProductID < 1) 
			throw new InvalidParameterException("No From Product ID"); 	
		if (toProductID < 1) 
			throw new InvalidParameterException("No To Product ID");
		
		// If not isSotrx Reopen purchase Order
		if (!mo.isSOTrx() && mo.getDocStatus().equalsIgnoreCase(MOrder.DOCSTATUS_Completed)){
			boolean successReopen = DocumentEngine.processIt(mo, DocActionConstants.ACTION_ReActivate);
			if (!successReopen) 
				throw new CompiereException("Unable to reopen Purchase Order " + mo.getDocumentNo());
			mo.save(trx);
		}
		lineOut = chgPart(ctx,mo, line,fromProductID,toProductID, trx);

		// If not isSotrx Reopen purchase Order
		if (!mo.isSOTrx() && mo.getDocStatus().equalsIgnoreCase(MOrder.DOCSTATUS_InProgress)){
			boolean successComplete = DocumentEngine.processIt(mo, DocActionConstants.ACTION_Complete);
			if (!successComplete) 
				throw new CompiereException("Unable to Close Purchase Order " + mo.getDocumentNo());
			mo.save(trx);
		}

		return lineOut; // ^__^ // 
	}
	
	
	private static int chgPart(Ctx ctx, MOrder mo, int line, int fromProductID, int toProductID, Trx trx) {
		//log.info("Line "+line+" "+fromProductID+" to "+toProductID);
		int lineOut = 0;
		MProduct pt = new MProduct(ctx, toProductID, trx);
		MOrderLine[] ols = mo.getLines(fromProductID, " C_OrderLine.line = "+line, null);
		for (int i = 0; i < ols.length; i++) {
			if (ols[i].getQtyDelivered().compareTo(BigDecimal.ZERO) == 0 && ols[i].getQtyInvoiced().compareTo(BigDecimal.ZERO) == 0 
					&& ols[i].getQtyEntered().compareTo(BigDecimal.ZERO) != 0){
				try{
					lineOut = createOALine(mo,toProductID, ols[i].getQtyEntered(), pt.getC_UOM_ID(), pt.getDescription(), trx);
					ols[i].setQty(BigDecimal.ZERO);
					// sera fait au complete ols[i].setQtyReserved(BigDecimal.ZERO);
					ols[i].setDescription("RB : " + pt.getValue() +  ( mo.getDescription() != null ? " " + mo.getDescription() : " " ));
					ols[i].save();
				}
				catch (Exception e)
				{
					throw new CompiereException("Unable to replace part on order " + mo.getDocumentNo(), e);
				}
				
			}
			else {
				throw new CompiereException("Change Part can not be done : Qty Delivered "+ols[i].getQtyDelivered()+"  Qty Invoiced "+ols[i].getQtyInvoiced());
			}
		}
		return lineOut;
	}
	
	private static int createOALine(MOrder in, int productID, BigDecimal qty, int uom, String description, Trx trx) {
		MOrderLine ol = new MOrderLine(in);
		ol.setM_Product_ID(productID);
		ol.setC_UOM_ID(uom);
		ol.setQtyEntered(qty);
		ol.setQtyOrdered(qty);
		ol.setDescription("AFS " + description);
		ol.setDatePromised(in.getDatePromised());
		ol.setPrice();
		ol.save(trx);
		ol.updateHeaderTax();
		return ol.getLine();
	}
	
	public static MOrder createPOForVendor(Ctx ctx, int AD_Client_ID,int Org_ID,int warehouse, int DocType_ID, int C_BPartner_ID,int SalesRep_ID, int TypeOA_ID,String PoRef, String desc, Trx trx)
	{
		HashMap<Integer, String> typesOA = new HashMap<Integer, String>();
		String sql = "Select Z_TYPEOA_ID, Value from Z_TYPEOA where AD_Client_ID = ?";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int counter = 0;
		try
		{	
			pstmt = DB.prepareStatement (sql, trx);
			pstmt.setInt(1, AD_Client_ID);
			rs = pstmt.executeQuery ();
			while (rs.next ())
			{
				typesOA.put(rs.getInt(1), rs.getString(2));
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			throw new CompiereException(e.toString());
		}finally 
		{
			Util.closeCursor(pstmt, rs);
		}
		//EggoCtx.setConstants();
		MBPartner vendor = new MBPartner (ctx, C_BPartner_ID, trx);
		
		
		MOrder po = new MOrder (ctx, 0, trx);
		po.setClientOrg(AD_Client_ID,Org_ID);
		//po.setRef_Order_ID(so.getC_Order_ID());
		po.setIsSOTrx(false);
		
		po.set_Value("Z_TypeOA_ID", TypeOA_ID);
		
		MDocTypeInfo dti = MDocTypeInfo.get(ctx, DocType_ID, trx);
		
		Timestamp ta = null;
		ta = new  Timestamp(System.currentTimeMillis());
		po.setDateOrdered (ta);  //TAM
		if (dti != null && dti.isSAV() && dti.isCuisine())  //MERGE
		{
				po.setC_DocTypeTarget_ID(dti.getC_DocType_AchatSAV_ID()); //MERGE
				po.setC_DocType_ID(dti.getC_DocType_AchatSAV_ID()); //MERGE
		}
		else { 
			if (dti.isDirect() && dti.isCuisine() ) //MERGE
			{
				po.setC_DocTypeTarget_ID(dti.getC_DocType_AchatDirect_ID());   //MERGE
				po.setC_DocType_ID(dti.getC_DocType_AchatDirect_ID()); //MERGE
			}
			else
				if ((dti.isStore() || dti.isPlacard()) && dti.isCuisine() ) //MERGE
				{
					po.setC_DocTypeTarget_ID(dti.getC_DocType_Achat_ID());   //MERGE
					po.setC_DocType_ID(dti.getC_DocType_Achat_ID()); //MERGE
				}
				else
					po.setC_DocTypeTarget_ID();  
		
		}
		//70902
		//po.setBPartner(vendor);
		po.setBPartner(vendor,po.getC_DocType_ID());
		MDocTypeInfo dtiPo = MDocTypeInfo.get(ctx,  po.getC_DocTypeTarget_ID(), trx);//DOCTYPE SAV
		Timestamp ts = null;

		ts = new Timestamp(System.currentTimeMillis());
		
		int deliveryTime = vendor.get_ValueAsInt("DeliveryTime");
		deliveryTime = deliveryTime * -1;
		if(dti.isSAV())
		{
			ts = new Timestamp(System.currentTimeMillis());
			deliveryTime = 21;
		}
		if (deliveryTime != 0 && ts != null )
		{	
				Calendar cal = Calendar.getInstance();
				cal.setTime(ts);
				cal.add(Calendar.DAY_OF_MONTH, deliveryTime);
				ts.setTime(cal.getTime().getTime()); // or
				ts = new Timestamp(cal.getTime().getTime());
		}
		
		po.setDatePromised(ts);
		//
		po.setDescription(desc);
		po.setPOReference(PoRef);
		//po.setPriorityRule(so.getPriorityRule());
		po.setSalesRep_ID(SalesRep_ID);
		//Si EggoLux et Tiers Avec ADR LUX et Monteur, WARHOUSE SUR LE MAGASIN
		
		//Si direct => 01
		if(warehouse>0)
		{
			po.setM_Warehouse_ID(warehouse);	
		}
		else
		{
			boolean ok = false;
			if(typesOA.get(po.get_ValueAsInt("Z_TypeOA_ID")).equals("MARCH"))
			{
				MWarehouse mws [] = MWarehouse.getForOrg(ctx, po.getAD_Org_ID());
				for (int i = 0; i < mws.length; i++) {
					MWarehouse mw = mws[i];
					MLocator[] mls  = MLocator.getWithWhereClause(ctx, mw.getM_Warehouse_ID(), 
							" AND Z_LocatorType_ID = (Select MAX(Z_LocatorType_ID) from Z_LocatorType "
							+ "where Z_LocatorType.AD_Client_ID = M_Locator.AD_Client_ID and upper(Z_LocatorType.Description) = upper('Stock Central'))") ;
					if(mls == null)
						continue;
					for (int j = 0; j < mls.length; j++) {
						po.setM_Warehouse_ID(mw.getM_Warehouse_ID());
						ok = true;
						break;
					}
					if(ok)
						break;
				
				}
			}
			else
				if(warehouse>0)
				{
					po.setM_Warehouse_ID(warehouse);
				}
		}		
		po.setIsDropShip(false);
		po.save();
		return po;
	}	//	createPOForVendor

	
	
}
