package com.audaxis.erp.service;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.CopyOnWriteArrayList;

import org.compiere.util.*;
import org.compiere.model.MOrder;
import org.compiere.model.MOrg;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.audaxis.compiere.model.MOrderDownload;
import com.audaxis.compiere.service.CompiereSessionFullService;
import com.audaxis.erp.json.OrderDownload;
import com.audaxis.erp.json.SetOrderDownloadResult;

import Util.WSUtil;

@Component
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@CacheConfig(cacheNames="common")
public class SetOrderDownloadService extends CompiereSessionFullService implements ISetOrderDownloadService {

	private int client_ID = 0;
	
	private MOrg org = null;
	private MOrder mo = null;
	private MOrderDownload mod = null;
	private boolean okx= false;
	
	@Override
	public SetOrderDownloadResult setOrderDownload(OrderDownload ordDown) {
		// TODO Auto-generated method stub
		SetOrderDownloadResult ret = new SetOrderDownloadResult();
		ret.error = SetOrderDownloadResult.E000;
		client_ID = getCtx().getAD_Client_ID();
		
		try{
		
		if(client_ID == 0)
		{
			ret.error = SetOrderDownloadResult.E002;
			ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E002);
			ret.c_OrderDownload_ID = 0;
			log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E002), "", ret.errordesc));
			return ret;
		}
		
		if(ordDown.ORDER_ID!=null && ordDown.ORDER_ID.length()>0 && !ordDown.ORDER_ID.equals("0"))
		{
			int v_order_ID = 0;
			try
		    {
				v_order_ID = Integer.parseInt(ordDown.ORDER_ID.trim());

		    }
		    catch (NumberFormatException nfe)
		    {
		    	ret.error = SetOrderDownloadResult.E011;
		    	ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011)+" : "+nfe.toString();
				ret.c_OrderDownload_ID = 0;
				log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011), "", ret.errordesc));
				nfe.printStackTrace();
				return ret;
		    }
			
			mo = new MOrder(getCtx(), v_order_ID, get_Trx());
			if(mo==null)
			{
				ret.error = SetOrderDownloadResult.E011;
				ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011);
				ret.c_OrderDownload_ID = 0;
				log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011), "", ret.errordesc));
				return ret;
			}
		}
		
		if((ordDown.ORDERNO == null || ordDown.ORDERNO.length()==0) 
				&& (ordDown.POREF== null || ordDown.POREF.length()==0) )
		{
			ret.error = SetOrderDownloadResult.E011;
			ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011);
			ret.c_OrderDownload_ID = 0;
			log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011), "", ret.errordesc));
			return ret;
		}
		
		if(ordDown.NAME == null && ordDown.NAME.length()==0)
		{
			ret.error = SetOrderDownloadResult.E030;
			ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E030);
			log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E030), "", ret.errordesc));
			return ret;
		}
		
		if(ordDown.DOWNLOADURL == null && ordDown.DOWNLOADURL.length()==0)
		{
			ret.error = SetOrderDownloadResult.E041;
			ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E041);
			log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E041), "", ret.errordesc));
			return ret;
		}
		
		if(ordDown.ORDERNO != null && ordDown.ORDERNO.length()>0 && mo==null)
		{
			mo =  WSUtil.getOrderByDocNo(getCtx(), ordDown.ORDERNO,"Y", get_Trx());
			if(mo==null)
			{
				ret.error = SetOrderDownloadResult.E011;
				ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011);
				ret.c_OrderDownload_ID = 0;
				log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E011), "", ret.errordesc));
				return ret;
			}
		}
		
		if(ordDown.MAG != null && ordDown.MAG.length()>0 && !ordDown.MAG.equals("0")){
			org = WSUtil.getOrgByValue(getCtx(),client_ID,ordDown.MAG);
		}
			if((ordDown.MAG == null || ordDown.MAG.length()>0 || org == null) && mo!=null)
			{
				org = new MOrg(getCtx(), mo.getAD_Org_ID(), get_Trx());
			}
			else
			{
				org = WSUtil.getOrgByValue(getCtx(),client_ID,"0");
			}
		
		
		
		if(ordDown.FROMEXTSOURCE==null)
			ordDown.FROMEXTSOURCE = "Y";
		else
			if(!((ordDown.FROMEXTSOURCE.equals("N") || ( ordDown.FROMEXTSOURCE.equals("Y")))))
			{
				ordDown.FROMEXTSOURCE = "Y";
			}
		
		Timestamp ti = null;
		if(ordDown.DATECREATED == null || ordDown.DATECREATED.length()==0)
		{
			ti = new Timestamp(System.currentTimeMillis());
		}else
		{
			try {
				SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy");
				Date date = null;
				date = simpleDateFormat.parse(ordDown.DATECREATED);
				long time = date.getTime();
				ti = new Timestamp(time);
			}
			catch (Exception e) {
				// TODO: handle exception
				ret.error = SetOrderDownloadResult.E031;
				ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E031)+" : "+e.toString();
				ret.c_OrderDownload_ID = 0;	
				log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E031), "", ret.errordesc));
				e.printStackTrace();
				return ret;
			}
			
		}
		
		
		
		if(mo != null && mo.getC_Order_ID() >0)
		{
			mod = new MOrderDownload(getCtx(), 0, get_Trx());
			mod.setAD_Org_ID(org.getAD_Org_ID());
			mod.setDownloadURL(ordDown.DOWNLOADURL);
			mod.setC_Order_ID(mo.getC_Order_ID());
			mod.setZ_FileType(ordDown.Z_FILETYPE);
			mod.setDescription(ordDown.DESCRIPTION);
			mod.set_ValueNoCheck("Z_FromExtSource", ordDown.FROMEXTSOURCE);
			mod.set_ValueNoCheck("DateCreated",ti);
			mod.setName(ordDown.NAME);
			if(!mod.save())
			{
				ret.error = SetOrderDownloadResult.E051;
				ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E051);
				log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E051), "", ret.errordesc));
				return ret;
			}
			okx = true;
		}else
			if(ordDown.POREF!=null)
			{
				//Pour tous les OA/OV du POREF
				CopyOnWriteArrayList<Integer> OrderIdList = WSUtil.getOrdersByPoRef(getCtx(), ordDown.POREF, "Y", get_Trx());
				for (int i = 0; i < OrderIdList.size(); i++) {
					MOrderDownload mod = new MOrderDownload(getCtx(), 0, get_Trx());
					mod.setAD_Org_ID(org.getAD_Org_ID());
					mod.setDownloadURL(ordDown.DOWNLOADURL);
					mod.setC_Order_ID(OrderIdList.get(i));
					mod.setZ_FileType(ordDown.Z_FILETYPE);
					mod.setDescription(ordDown.DESCRIPTION);
					mod.set_ValueNoCheck("Z_FromExtSource", ordDown.FROMEXTSOURCE);
					mod.set_ValueNoCheck("DateCreated",ti);
					mod.setName(ordDown.NAME);
					if(!mod.save())
					{
						ret.error = SetOrderDownloadResult.E051;
						ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E051);
						log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E051), "", ret.errordesc));
						return ret;
					}
					okx = true;
				}
			}

		if(okx) {
			ret.error = SetOrderDownloadResult.E507;
			ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E507);
			if(mod!=null)
				ret.c_OrderDownload_ID = mod.getC_OrderDownload_ID();
			//log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E507), "", ret.errordesc));
			return ret;
		}
		}
		catch(Exception ex)
		{
			ret.error = SetOrderDownloadResult.E999;
			ret.errordesc = SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E999)+" : "+ex.toString();
			ret.c_OrderDownload_ID = 0;	
			log.info(String.format(SetOrderDownloadResult.getErrorMsg(SetOrderDownloadResult.E999), "", ret.errordesc));
			ex.printStackTrace();
			return ret;
		}
		
		return ret;
	}

	
	
	@Override
	public OrderDownload getOrderDownloadByName(String Name, int c_order_id) {
		
		OrderDownload ret = new OrderDownload();
		
		if(Name==null || Name.length()==0)
		{
			ret.ORDERDOWNLOAD_ID = ""+-1;
			ret.NAME = Name;
			ret.ORDER_ID = ""+c_order_id;
			return ret; 
		}
		
		if(c_order_id<=0)
		{
			ret.ORDERDOWNLOAD_ID = ""+-1;
			ret.NAME = Name;
			ret.ORDER_ID = ""+c_order_id;
			return ret; 
		}
		
		String sql = "select od.C_ORDERDOWNLOAD_ID " +
	            "      from c_orderdownload od " +
	            "      WHERE od.AD_CLIENT_ID    = ?" +
	            "      AND   C_ORDER_ID = ?" +
	            "     AND   LOWER(od.name) = LOWER(?)";
		int ORDERDOWNLOAD_ID = QueryUtil.getSQLValue(get_Trx(), sql, getCtx().getAD_Client_ID(),c_order_id,Name);
		if(ORDERDOWNLOAD_ID<=0)
		{
			ret.ORDERDOWNLOAD_ID = ""+-1;
			ret.NAME = Name;
			ret.ORDER_ID = ""+c_order_id;
			return ret; 
		}
		MOrderDownload mod = new MOrderDownload(getCtx(), ORDERDOWNLOAD_ID, get_Trx());
		MOrder mo = new MOrder(getCtx(), c_order_id, get_Trx());
		ret.NAME = mod.getName();
		ret.ORDER_ID = ""+mod.getC_Order_ID();
		ret.ORDERDOWNLOAD_ID = ""+mod.getC_OrderDownload_ID();
		ret.ORDERNO = mo.getDocumentNo();
		ret.POREF = mo.getPOReference();
		ret.Z_FILETYPE = mod.getZ_FileType();
		ret.FROMEXTSOURCE = mod.get_ValueAsString("Z_FromExtSource");
		if(mod.get_ValueAsTimestamp("DateCreated")!=null) {
			Timestamp ti = mod.get_ValueAsTimestamp("DateCreated");
			String DateCreated = new SimpleDateFormat("dd/MM/yyyy").format(ti);
			ret.DATECREATED = DateCreated;
		}
		ret.DOWNLOADURL = mod.getDownloadURL();
		ret.DESCRIPTION = mod.getDescription();
		return ret;
	}

	
}
